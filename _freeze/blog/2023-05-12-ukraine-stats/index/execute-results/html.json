{
  "hash": "3b5838257321a1ce231e3d90eb8b278c",
  "result": {
    "markdown": "---\ntitle: \"Ukraine MOD Statistics on Russian Losses\"\neditor: visual\nauthor: John Goldin\ndate: '2023-05-26'\n\nimage: \"UA-MOD-casualty-image.jpeg\"\nimage-alt: \"An example of a Russian casualty estimate as it appears on the Ukranian Ministry of Defense site\"\nimage-height: \"100px\"\nslug: ukraine-mod-stats\ncategories:\n  - Ukraine\ntags:\n  - Ukraine\ndescription: |\n  Scraped stats from Ukraine Ministry of Defense on Russian losses.\nlayout: single\nformat:\n  html:\n    code-fold: true\n    code-summary: \"Show the code\"\n    toc: true\n    fig-cap-location: top\nexecute: \n  echo: false\n---\n\n\nEach day the [Ministry of Defence of Ukraine](https://www.mil.gov.ua/en/news) publishes a summary of Russian combat losses since the beginning of the Russian invasion. Daily reports presented in a fairly constant format go back to April of 2022.\n\nThis blog post provides a simple plot to track the losses as reported by the MOD.\nI've used R to download those reports and summarize them. I'm sure many others have done something similar.\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\nThe Ministry of Defence of Ukraine has been reporting a summary of Russian losses each day, including a graphic version like this:\n\n![Russian losses reported by Ukraine Ministry of Defence](UA-MOD-casualty-image.jpg){width=\"376\"}\n\nThe plot below summarizes the data in the Ministry of Defence reports of Russian losses\nup through May 25, 2023.\nIt reports the average *daily* losses for each week. (Note that the last data point in the\nseries may be based on a partial week.)\n\n\n\n\n\n::: {.cell file='~/Documents/R_local_repos/ukrainestats/R/ukraine_functions.R'}\n\n```{.r .cell-code .code-overflow-scroll  code-fold=\"true\" code-summary=\"R code which scrapes data from Ministry of Defense of Ukraine\" code-line-numbers=\"true\"}\n# using: https://www.scrapingdog.com/blog/web-scraping-r/\n# link <- \"https://www.mil.gov.ua/en/news/2023/03/08/the-total-combat-losses-of-the-enemy-from-24-02-2022-to-08-03-2023/\"\n# page = read_html(link, as_html = FALSE)\n# lines <- read_html(link)\n\n############################################################################\n# These functions find the URL's for the Ukraine MOD daily reports and\n# parset the reports. The counts of losses are tabulated in the data frame\n# ukr_mod_df. To update that data frame, execute in the console\n#     update_ukr_mod_df(\"ukr_mod_df.RData\")\n############################################################################\n\n\nif (1 == 2) {\n  ############################################################################\n  # Run the next line to update the data in ukr_mod_df.RData.\n  ############################################################################\n  update_ukr_mod_df(\"ukr_mod_df.RData\")\n}\n\nlibrary(tidyverse)\nlibrary(glue)\nlibrary(xml2)\n\n#' Extract the casualty count from a line in the report based on a regex search\n#'\n#'\n#'\n#' @param text The text of the web page that contains the casualty report.\n#' @param phrase The regex that will find the casualty number.\n#'\n#' @return The casualty number.\n#' @export\n#'\n#' @examples\n#' x <- str_extract(text, \"(?<=personnel [‒-] about )\\\\d*\")\nextract_number  <-  function(text, phrase = \"(?<=personnel [‒-] about )\\\\d*\") {\n  x <- str_extract(text, phrase)\n  if (is.na(x)) {\n    if (!str_detect(text, phrase)) stop(paste0(phrase, \" not found\"))\n    warning(paste0(\"number not found:\", text()))\n    return(NA_real_)\n  }\n  as.numeric(x)\n}\n\n# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\n#\n# Notes on scraping and parsing the data on Russian losses from the\n# Ukraine Ministry of Defense web site:\n#\n# April 12, 2022 is earliest Russian casualty count\n#\n# Some dates that are missing data: \"2022-06-16\", \"2022-06-18\" (others in June)\n#\n# at this point doing two digit date for start of war and end\n# https://www.mil.gov.ua/en/news/2023/02/23/the-total-combat-losses-of-the-enemy-from-24-02-22-to-23-02-23/\n#\n#   back then two digit years\n# https://www.mil.gov.ua/en/news/2022/12/16/the-total-combat-losses-of-the-enemy-from-24-02-to-16-12/\n#\n#   https://www.mil.gov.ua/en/news/2022/12/31/the-total-combat-losses-of-the-enemy-from-24-02-to-31-12/\n#\n#   3/3/2023 seems to be start of using 4-digit year\n#\n# wrong:\n#   https://www.mil.gov.ua/en/news/2022/09/23/the-total-combat-losses-of-the-enemy-from-24-02-to-23-09/\n#\n#   On January 1, started doing two digit dates\n# https://www.mil.gov.ua/en/news/2023/01/03/the-total-combat-losses-of-the-enemy-from-24-02-22-to-03-01-23/\n#\n#   works\n# https://www.mil.gov.ua/en/news/2023/02/20/the-total-combat-losses-of-the-enemy-from-24-02-22-to-20-02-23/\n#\n#   does not work:\n#   https://www.mil.gov.ua/en/news/23/02/23/the-total-combat-losses-of-the-enemy-from-24-02-22-to-23-02-23/\n#\n#   does note work:\n#   https://www.mil.gov.ua/en/news/23/02/20/the-total-combat-losses-of-the-enemy-from-24-02-22-to-20-02-23/\n#\n#   works:\n#   https://www.mil.gov.ua/en/news/2022/05/09/the-total-combat-losses-of-the-enemy-from-24-02-to-09-05/\n#\n#   works:\n#   https://www.mil.gov.ua/en/news/2022/06/25/the-total-combat-losses-of-the-enemy-from-24-02-to-25-06/\n#\n#   works:\n#   https://www.mil.gov.ua/en/news/2022/04/16/the-total-combat-losses-of-the-enemy-from-24-02-to-16-04/\n#\n#   first phrase changed between 2022-04-16 and 2022-04-17\n# \"personnel ‒ about\" to\n#\n#\n# wrong:\n#   https://www.mil.gov.ua/en/news/2022/07/12/the-total-combat-losses-of-the-enemy-from-24-02-to-12-07/\n#\n#   wrong:\n#   https://www.mil.gov.ua/en/news/2022/06/20/the-total-combat-losses-of-the-enemy-from-24-02-to-20-06/\n#\n#   More than one line found 2022-06-06 and that goes until 2022-07-26 when hits error\n# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\n\n\n#' Create a URL that goes to a standard Russian casualty report\n#'\n#' @param adate The Date for the report.\n#'\n#' @return String with the URL for the casualty report.\n#' @export\n#'\n#' @examples\ncreate_ukr_mod_link <- function(adate) {\n  if (!is.Date(adate)) adate <- as_date(adate)\n  if (is.na(adate)) {\n    warning(paste0(adate, \"is not a valid date.[increate_ukr_mod_link]\"))\n    return(\"\")\n  }\n  # must have this form:   (4 digit years)\n  # https://www.mil.gov.ua/en/news/2023/03/08/the-total-combat-losses-of-the-enemy-from-24-02-2022-to-08-03-2023/\n  if (adate == as_date(\"2023-03-30\")) link <-  \"https://www.mil.gov.ua/en/news/2023/03/30/blizko-173-tis-osib-znishheno-ponad-6970-bojovih-bronovanih-mashin-voroga-–-genshtab-zsu/\"\n  else if (adate >= as_date(\"2023-03-03\")) link <- glue(\"https://www.mil.gov.ua/en/news/\", format(adate, \"%Y/%m/%d\"), \"/the-total-combat-losses-of-the-enemy-from-24-02-2022-to-\", format(adate, \"%d-%m-%Y\"), \"/\")\n  else if (adate >= as_date(\"2023-01-01\")) link <- glue(\"https://www.mil.gov.ua/en/news/\", format(adate, \"%Y/%m/%d\"), \"/the-total-combat-losses-of-the-enemy-from-24-02-22-to-\", format(adate, \"%d-%m-%y\"), \"/\")\n  else link <- glue(\"https://www.mil.gov.ua/en/news/\", format(adate, \"%Y/%m/%d\"), \"/the-total-combat-losses-of-the-enemy-from-24-02-to-\", format(adate, \"%d-%m\"), \"/\")\n  link\n}\n\n#' Extract the lines from a Ukraine Ministry of Defense page that contain the Russian casualty counts\n#'\n#' @param adate Date of casualty report on Ukraine Ministry of Defense web site\n#' @param fetch_image_url Fetch the URL that displays the report as an image.\n#'\n#' @return List of text lines that contain the casualty reports, each category on different line.\n#' @export\n#'\n#' @examples\n#' fetch_mod_text(\"2023-03-29\")\n\nfetch_ukr_mod_text <- function(adate, fetch_image_url = FALSE) {\n  if (!is.Date(adate)) adate <- as_date(adate)\n  if (adate < ymd(\"2022-04-12\")) return(NA_character_)\n  if (adate > today()) return(NA_character_)\n\n  # what image line looks like:\n  # himg <- \"<a href=\\\"/assets/images/resources/69849/0b6b4d3834eddf4a9f1c0a30b788ca484d850890.jpg\\\" class=\\\"thumbnail\\\" data-image=\\\"/assets/images/resources/69849/0b6b4d3834eddf4a9f1c0a30b788ca484d850890.jpg\\\">\"\n  # from chatGPT:\n  # my_string <- \"This is a string with start some text end in the middle.\"\n  #\n  # # This regex pattern will extract the text between \"start\" and \"end\"\n  # extracted_text <- str_extract(my_string, \"(?<=start ).*(?= end)\")\n  # str_extract(himg, \"(?<=href=\\\").*(?=\\\" class)\")\n  # keep in mind: stringi::stri_reverse(\"abcde\")\n  # look for:  \"<base href=\\\"https://www.mil.gov.ua/en/\\\" />\"\n\n  link <- create_ukr_mod_link(adate)\n  x <- read_lines(link)\n\n  if (length(x) == 0) stop(paste0(\"For \", adate, \" Link not found. \", link))\n\n  if (fetch_image_url) {\n    # return an image URL, not casualty data\n    image_lines <-  x[str_detect(x, \"meta property=\\\"og:image\")]\n    if (length(image_lines) == 0) return(\"https://www.mil.gov.ua/assets/images/resources/69817/1ade4ec8f38bbaac946cff911451f14c3f551248.jpg\")\n    return(str_extract(image_lines[1], \"(?<=content=\\\").*(?=\\\" />)\"))\n  }\n  # image_lines <-  x[str_detect(x, \"meta property=\\\"og:image\")]\n  # str_extract(image_lines[1], \"(?<=content=\\\").*(?=\\\" />)\")\n  #\n  # the image of the report is in: x[str_detect(x, \"<a href=\\\"/assets/images/resources/\")]\n  #the_line <- x[x |> str_detect(\"personnel ‒ about\")]\n  # the_line <- x[x |> str_detect(\"The total combat losses of the enemy from\")]\n  if (adate <= ymd(\"2022-04-16\")) the_line <- x[str_detect(x, \"personnel ‒ about\")]\n  if (adate > ymd(\"2022-04-16\")) the_line <- x[str_detect(x, \"persons were liquidated\")]\n  if (length(the_line) == 0) {\n    warning(paste0(\"Info line not found for \", adate))\n    return(NA_character_)\n  }\n  # 2023-04-23 not read because text of report appears twice on the page\n  if (length(the_line) > 1) {\n    warning(paste0(\"More than one line found \", adate, \"\\n\", link))\n    return(NA_character_)\n  }\n  if (adate <= as_date(\"2022-04-16\")) first_line <- which(str_detect(x, \"personnel ‒ about\"))\n  if (adate > as_date(\"2022-04-16\"))  first_line <- which(str_detect(x, \"persons were liquidated\"))\n  last_line <- which(str_detect(x, \"special equipment\"))\n  if (is.na(last_line) || (length(last_line) == 0)) last_line <- which(str_detect(x, \"vehicles\"))\n  if (is.na(last_line) || (length(last_line) == 0)) last_line <- which(str_detect(x, \"UAV\"))\n  if (is.na(last_line) || (length(last_line) == 0)) last_line <- first_line + 10\n  # the_line\n  str_flatten(c(as.character(adate), x[first_line:last_line]))\n}\n\n#' Parse the Russian casualty info from Ukraine MOD summary pages.\n#'\n#' The text from each web page is in the report column. The extract_number\n#' function is used to find the casualties for each item, based on a regular expression\n#' to search for that type of item.\n#'\n#' @param mod_df A df which has a report column that contains the text from casualty web pages.\n#'\n#' @return The same df is returned, but with numeric columns added for each type of casualty.\n#' @export\n#'\n#' @examples\nparse_ukr_mod_text <- function(mod_df) {\n  mod_df$personnel = map_dbl(str_replace_all(mod_df$report, intToUtf8(160), \"\"), extract_number, phrase = \"(?<=personnel ?[‒-–-] ? ?about )\\\\d*\" )\n  mod_df$tanks = map_dbl(mod_df$report, extract_number, phrase = \"(?<=tanks [‒-–-] )\\\\d*\" )\n  mod_df$apv = map_dbl(mod_df$report, extract_number, phrase = \"(?<=APV [‒-–-] )\\\\d*\" )\n  mod_df$artillery = map_dbl(mod_df$report, extract_number, phrase = \"(?<=artillery systems [‒-–-] )\\\\d*\" )\n  mod_df$mlrs = map_dbl(mod_df$report, extract_number, phrase = \"(?<=MLRS [‒-–-] )\\\\d*\" )\n  mod_df$aa = map_dbl(mod_df$report, extract_number, phrase = \"(?<=Anti-aircraft warfare systems [‒-–-] )\\\\d*\" )\n  mod_df$aircraft = map_dbl(mod_df$report, extract_number, phrase = \"(?<=aircraft [‒-–-] )\\\\d*\" )\n  mod_df$helicopters = map_dbl(mod_df$report, extract_number, phrase = \"(?<=helicopters [‒-–-] )\\\\d*\" )\n  mod_df$uav = map_dbl(mod_df$report, extract_number, phrase = \"(?<=UAV operational-tactical level [‒-–-] )\\\\d*\" )\n  mod_df$vehicles = map_dbl(mod_df$report, extract_number, phrase = \"(?<=vehicles and fuel tanks [‒-–-] )\\\\d*\" )\n  # mod_df$special = map_dbl(mod_df$report, extract_number, phrase = \"(?<=special equipment [‒-–-] )\\\\d*\" )\n  mod_df$warships = map_dbl(mod_df$report, extract_number, phrase = \"(?<=warships / boats [‒-–-] )\\\\d*\" )\n  mod_df\n}\n\n#' Update the df that contains Ukraine MOD Russian casualty stats\n#'\n#' @param fname_ukr_mod_df file name of RData file that contains the stats\n#'\n#' @return Returns the updated df but also saves it to an RData file as a side effect.\n#' @export\n#'\n#' @examples\n#' update_ukr_mod_df(\"ukr_mod_df.RData\", save_fname_ukr_mod_df = \"test.RData\")\n#'\nupdate_ukr_mod_df <- function(fname_ukr_mod_df, from_date = NULL, to_date = NULL,\n                              days_previous = 20,\n                              save_fname_ukr_mod_df = NULL) {\n\n  if (1 == 2) {\n    ############################################################################\n    # Run the next line to update the data in ukr_mod_df.RData.\n    ############################################################################\n    update_ukr_mod_df(\"ukr_mod_df.RData\", save_fname_ukr_mod_df = \"ukr_mod_df.RData\")\n  }\n\n  load(fname_ukr_mod_df)\n\n  ############################################################################\n  # Here's the orginal sequence of dates that was used to initialize ukr_mod_df.\n  # the_dates <- seq(from = ymd(\"2022-04-15\"), to = today(), by = \"1 day\")\n  ############################################################################\n\n  # dates that need to be added to ukr_mod_df\n  if (is.null(from_date)) from_date <-  today() - days_previous\n  if (is.null(to_date)) to_date <- today()\n\n  additional_dates <- seq(from = from_date, to = to_date, by = \"1 day\")\n  abunch <- map_chr(additional_dates, fetch_ukr_mod_text, .progress = TRUE)\n  abunch <- abunch[!is.na(abunch)]\n\n  # ukr_mod_df <- tibble(report = abunch, date = ymd(str_sub(report, start = 1, end = 10)))\n  if (length(abunch > 0)) {\n    ukr_mod_page_additions <- tibble(report = abunch, date = ymd(str_sub(report, start = 1, end = 10)))\n    ukr_mod_additions <- parse_ukr_mod_text(ukr_mod_page_additions)\n  }\n\n  # use overlap_dates to check whether MOD has updated recent daata\n  # overlap_dates <- bind_rows(ukr_mod_df |> filter((ukr_mod_df$date %in% ukr_mod_additions$date)),\n  #                            ukr_mod_additions |> filter(ukr_mod_additions$date %in% ukr_mod_df$date)) |>\n  #   arrange(date) # |> View()\n\n  # save_ukr_mod__df <- ukr_mod_df\n  ukr_mod_df <- bind_rows(ukr_mod_df |> filter(!(ukr_mod_df$date %in% ukr_mod_additions$date)), ukr_mod_additions)\n\n  # calculate the number of days between each row\n  ukr_mod_df <- ukr_mod_df |> mutate(gap = as.numeric(date - lag(date, default = ukr_mod_df$date[1] - 1)))\n\n  # by default, save it back into the save file that it was loaded from\n  if (is.null(save_fname_ukr_mod_df)) save_fname_ukr_mod_df <- fname_ukr_mod_df\n  save(ukr_mod_df, file = save_fname_ukr_mod_df)\n  usethis::ui_done(glue::glue(\"Updated {save_fname_ukr_mod_df} through {max(ukr_mod_df$date, na.rm = TRUE)}.\"))\n  return(ukr_mod_df)\n}\n```\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code .code-overflow-scroll  code-fold=\"true\" code-summary=\"R code which creates the summary plot\" code-line-numbers=\"true\"}\n# for_plot <- ukr_mod3 |> \n#   pivot_longer(cols = c(Personnel, Tanks, APV, Artillery, MLRS,\n#                         Helicopters, Aircraft), \n#                names_to = \"category\", values_to = \"count\") |> \n#   mutate(category = factor(category, levels = c(\"Personnel\", \"Tanks\", \"APV\",\n#                                                 \"Artillery\", \"MLRS\", \n#                                                 \"Helicopters\", \"Aircraft\")))\n# \n# p <- ggplot(data = for_plot, aes(x = date, y = count)) + \n#   geom_smooth(colour = \"darkgrey\") +\n#   geom_point() + \n#   facet_wrap(~ category, ncol = 1, scales = \"free_y\")\n\n#############################################################################\n#\n# Calculate average daily Russian losses by week. -> ukr_mod_weekly\n#\n#############################################################################\n\nukr_mod_weekly <- ukr_mod_df  |> arrange(date) |> \n  # isoweek of January 1 is 52, not 1\n  mutate(wk = if_else((isoweek(date) > 25) & (month(date) == 1),  year(date) - 1, year(date)) * 100 + isoweek(date)) |> \n  group_by(wk) |> \n  slice_tail(n = 1) |>  # as recommended by GPT\n  ungroup() |> \n  mutate(gap = as.numeric(date - lag(date, default = ukr_mod_df$date[1] - 1)),\n         Personnel = (personnel - lag(personnel)) / gap,\n         Tanks = (tanks - lag(tanks)) / gap,\n         APV = (apv - lag(apv)) / gap,\n         Artillery = (artillery - lag(artillery)) / gap,\n         MLRS = (mlrs - lag(mlrs)) / gap,\n         Helicopters = (helicopters - lag(helicopters)) / gap,\n         Aircraft = (aircraft - lag(aircraft)) / gap)\n\nfor_plot_wk <- ukr_mod_weekly |> \n  pivot_longer(cols = c(Personnel, Tanks, APV, Artillery, MLRS,\n                        Helicopters, Aircraft), \n               names_to = \"category\", values_to = \"count\")|> \n  mutate(category = factor(category, levels = c(\"Personnel\", \"Tanks\", \"APV\",\n                                                \"Artillery\", \"MLRS\", \n                                                \"Helicopters\", \"Aircraft\")))\nmilestones$category = factor(milestones$category, levels = levels(for_plot_wk$category))\n\nfull_milestones <- tidyr::crossing(levels(milestones$category), milestones$date)\npwk <- ggplot(data = for_plot_wk, aes(x = date, y = count)) + \n  # ylim(0, NA) +\n  geom_vline(data = tidyr::expand(milestones, category, date), mapping = aes(xintercept = date), colour = \"orange\") +\n  geom_smooth(colour = \"darkgrey\", span = 0.15) +\n  geom_point() + \n  geom_text(data = milestones, aes(label = key_symbol, y = Inf), colour = \"orange\", vjust = 1, hjust = 0) +\n  geom_text(data = milestones, aes(label = short_event, y = Inf), colour = \"darkgrey\", angle = 90, hjust = 1, vjust = 0) +\n  facet_wrap(~ category, ncol = 1, scales = \"free_y\") +\n  ggtitle(paste0(\"Ukranian MOD Reports of Average Daily Russian Losses Thru \", up_through_char)) + \n  xlab(\"\") + ylab(\"Average Daily Losses\") +\n  theme_minimal()\n\n# Noah Smkth tweet onincrease in artillery losses: https://twitter.com/Noahpinion/status/1660793977917046784\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![Weekly Russian Losses According to Ukraine Ministry of Defense](index_files/figure-html/display-weekley-plot-1.png){width=768}\n:::\n:::\n\n\nThis is only the Ukraine side of the story. \n\nThe report always refers to \"liquidated personnel,\" but there's some ambiguity about what that means.\n\n> The Ukrainians use the word \"liquidated\" to refer to the Russian losses. However, that word choice leaves the actual figure of killed and wounded up to interpretation. With \"liquidated\" Kyiv could mean \"killed\" or \"killed and wounded.\" -- Stavros Atlamazoglou at the website [19fortyfive.com](https://www.19fortyfive.com/2023/03/220000-dead-or-wounded-putins-ukraine-war-destroyed-the-russian-military/)\n\nPresumably the personnel losses are an estimate. There are lots of factors that could affect\nhow close these counts come to reality. Western intelligence sources sometimes report their\nown estimates of Russian losses. Those do not necessarily match these counts.\nThe plot may help to assess the change in the tempo of the war over time.\n\nThe vertical red lines on the plot intended  to help relate the time line to\nsome of the reported events during the war. \nEach line is identified by a letter. The labels on the plot are \nnecessarily terse; the table below lists them with a bit fuller labels.\n\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div id=\"ekagjxppik\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\">\n<style>#ekagjxppik table {\n  font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n#ekagjxppik thead, #ekagjxppik tbody, #ekagjxppik tfoot, #ekagjxppik tr, #ekagjxppik td, #ekagjxppik th {\n  border-style: none;\n}\n\n#ekagjxppik p {\n  margin: 0;\n  padding: 0;\n}\n\n#ekagjxppik .gt_table {\n  display: table;\n  border-collapse: collapse;\n  line-height: normal;\n  margin-left: auto;\n  margin-right: auto;\n  color: #333333;\n  font-size: 16px;\n  font-weight: normal;\n  font-style: normal;\n  background-color: #FFFFFF;\n  width: auto;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #A8A8A8;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #A8A8A8;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n}\n\n#ekagjxppik .gt_caption {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n#ekagjxppik .gt_title {\n  color: #333333;\n  font-size: 125%;\n  font-weight: initial;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-color: #FFFFFF;\n  border-bottom-width: 0;\n}\n\n#ekagjxppik .gt_subtitle {\n  color: #333333;\n  font-size: 85%;\n  font-weight: initial;\n  padding-top: 3px;\n  padding-bottom: 5px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-color: #FFFFFF;\n  border-top-width: 0;\n}\n\n#ekagjxppik .gt_heading {\n  background-color: #FFFFFF;\n  text-align: center;\n  border-bottom-color: #FFFFFF;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#ekagjxppik .gt_bottom_border {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#ekagjxppik .gt_col_headings {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#ekagjxppik .gt_col_heading {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  overflow-x: hidden;\n}\n\n#ekagjxppik .gt_column_spanner_outer {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: 4px;\n  padding-right: 4px;\n}\n\n#ekagjxppik .gt_column_spanner_outer:first-child {\n  padding-left: 0;\n}\n\n#ekagjxppik .gt_column_spanner_outer:last-child {\n  padding-right: 0;\n}\n\n#ekagjxppik .gt_column_spanner {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 5px;\n  overflow-x: hidden;\n  display: inline-block;\n  width: 100%;\n}\n\n#ekagjxppik .gt_spanner_row {\n  border-bottom-style: hidden;\n}\n\n#ekagjxppik .gt_group_heading {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  text-align: left;\n}\n\n#ekagjxppik .gt_empty_group_heading {\n  padding: 0.5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#ekagjxppik .gt_from_md > :first-child {\n  margin-top: 0;\n}\n\n#ekagjxppik .gt_from_md > :last-child {\n  margin-bottom: 0;\n}\n\n#ekagjxppik .gt_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  margin: 10px;\n  border-top-style: solid;\n  border-top-width: 1px;\n  border-top-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  overflow-x: hidden;\n}\n\n#ekagjxppik .gt_stub {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#ekagjxppik .gt_stub_row_group {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n  vertical-align: top;\n}\n\n#ekagjxppik .gt_row_group_first td {\n  border-top-width: 2px;\n}\n\n#ekagjxppik .gt_row_group_first th {\n  border-top-width: 2px;\n}\n\n#ekagjxppik .gt_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#ekagjxppik .gt_first_summary_row {\n  border-top-style: solid;\n  border-top-color: #D3D3D3;\n}\n\n#ekagjxppik .gt_first_summary_row.thick {\n  border-top-width: 2px;\n}\n\n#ekagjxppik .gt_last_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#ekagjxppik .gt_grand_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#ekagjxppik .gt_first_grand_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: double;\n  border-top-width: 6px;\n  border-top-color: #D3D3D3;\n}\n\n#ekagjxppik .gt_last_grand_summary_row_top {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: double;\n  border-bottom-width: 6px;\n  border-bottom-color: #D3D3D3;\n}\n\n#ekagjxppik .gt_striped {\n  background-color: rgba(128, 128, 128, 0.05);\n}\n\n#ekagjxppik .gt_table_body {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#ekagjxppik .gt_footnotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#ekagjxppik .gt_footnote {\n  margin: 0px;\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#ekagjxppik .gt_sourcenotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#ekagjxppik .gt_sourcenote {\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#ekagjxppik .gt_left {\n  text-align: left;\n}\n\n#ekagjxppik .gt_center {\n  text-align: center;\n}\n\n#ekagjxppik .gt_right {\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n}\n\n#ekagjxppik .gt_font_normal {\n  font-weight: normal;\n}\n\n#ekagjxppik .gt_font_bold {\n  font-weight: bold;\n}\n\n#ekagjxppik .gt_font_italic {\n  font-style: italic;\n}\n\n#ekagjxppik .gt_super {\n  font-size: 65%;\n}\n\n#ekagjxppik .gt_footnote_marks {\n  font-size: 75%;\n  vertical-align: 0.4em;\n  position: initial;\n}\n\n#ekagjxppik .gt_asterisk {\n  font-size: 100%;\n  vertical-align: 0;\n}\n\n#ekagjxppik .gt_indent_1 {\n  text-indent: 5px;\n}\n\n#ekagjxppik .gt_indent_2 {\n  text-indent: 10px;\n}\n\n#ekagjxppik .gt_indent_3 {\n  text-indent: 15px;\n}\n\n#ekagjxppik .gt_indent_4 {\n  text-indent: 20px;\n}\n\n#ekagjxppik .gt_indent_5 {\n  text-indent: 25px;\n}\n</style>\n<table class=\"gt_table\" data-quarto-disable-processing=\"false\" data-quarto-bootstrap=\"false\">\n  <thead>\n    \n    <tr class=\"gt_col_headings\">\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"Key\">Key</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"Date\">Date</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"Event\">Event</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"Plot Label\">Plot Label</th>\n    </tr>\n  </thead>\n  <tbody class=\"gt_table_body\">\n    <tr><td headers=\"Key\" class=\"gt_row gt_left\">a</td>\n<td headers=\"Date\" class=\"gt_row gt_right\">2022-04-04</td>\n<td headers=\"Event\" class=\"gt_row gt_left\">UKR cleared west</td>\n<td headers=\"Plot Label\" class=\"gt_row gt_left\">cleared west</td></tr>\n    <tr><td headers=\"Key\" class=\"gt_row gt_left\">b</td>\n<td headers=\"Date\" class=\"gt_row gt_right\">2022-04-19</td>\n<td headers=\"Event\" class=\"gt_row gt_left\">Russian attack in east</td>\n<td headers=\"Plot Label\" class=\"gt_row gt_left\">Attack</td></tr>\n    <tr><td headers=\"Key\" class=\"gt_row gt_left\">c</td>\n<td headers=\"Date\" class=\"gt_row gt_right\">2022-05-08</td>\n<td headers=\"Event\" class=\"gt_row gt_left\">Siverskyi Russian failure</td>\n<td headers=\"Plot Label\" class=\"gt_row gt_left\">Siverskyi</td></tr>\n    <tr><td headers=\"Key\" class=\"gt_row gt_left\">d</td>\n<td headers=\"Date\" class=\"gt_row gt_right\">2022-05-13</td>\n<td headers=\"Event\" class=\"gt_row gt_left\">UKR counter-attack Kharkiv</td>\n<td headers=\"Plot Label\" class=\"gt_row gt_left\">Kharkiv</td></tr>\n    <tr><td headers=\"Key\" class=\"gt_row gt_left\">e</td>\n<td headers=\"Date\" class=\"gt_row gt_right\">2022-05-20</td>\n<td headers=\"Event\" class=\"gt_row gt_left\">Mariupol Fell</td>\n<td headers=\"Plot Label\" class=\"gt_row gt_left\">Mariupol</td></tr>\n    <tr><td headers=\"Key\" class=\"gt_row gt_left\">f</td>\n<td headers=\"Date\" class=\"gt_row gt_right\">2022-07-03</td>\n<td headers=\"Event\" class=\"gt_row gt_left\">UKR start Kherson offensive</td>\n<td headers=\"Plot Label\" class=\"gt_row gt_left\">Kherson</td></tr>\n    <tr><td headers=\"Key\" class=\"gt_row gt_left\">g</td>\n<td headers=\"Date\" class=\"gt_row gt_right\">2022-08-29</td>\n<td headers=\"Event\" class=\"gt_row gt_left\">Lysychansk fell</td>\n<td headers=\"Plot Label\" class=\"gt_row gt_left\">Lysychansk</td></tr>\n    <tr><td headers=\"Key\" class=\"gt_row gt_left\">h</td>\n<td headers=\"Date\" class=\"gt_row gt_right\">2022-09-06</td>\n<td headers=\"Event\" class=\"gt_row gt_left\">Kharkiv offensive</td>\n<td headers=\"Plot Label\" class=\"gt_row gt_left\">Kharkiv</td></tr>\n    <tr><td headers=\"Key\" class=\"gt_row gt_left\">i</td>\n<td headers=\"Date\" class=\"gt_row gt_right\">2022-09-21</td>\n<td headers=\"Event\" class=\"gt_row gt_left\">Russia partial mobilization</td>\n<td headers=\"Plot Label\" class=\"gt_row gt_left\">mobilized</td></tr>\n    <tr><td headers=\"Key\" class=\"gt_row gt_left\">j</td>\n<td headers=\"Date\" class=\"gt_row gt_right\">2022-10-01</td>\n<td headers=\"Event\" class=\"gt_row gt_left\">Lyman taken</td>\n<td headers=\"Plot Label\" class=\"gt_row gt_left\">Lymann</td></tr>\n    <tr><td headers=\"Key\" class=\"gt_row gt_left\">k</td>\n<td headers=\"Date\" class=\"gt_row gt_right\">2022-11-11</td>\n<td headers=\"Event\" class=\"gt_row gt_left\">UKR enter Kharkiv</td>\n<td headers=\"Plot Label\" class=\"gt_row gt_left\">Kharkiv</td></tr>\n    <tr><td headers=\"Key\" class=\"gt_row gt_left\">l</td>\n<td headers=\"Date\" class=\"gt_row gt_right\">2023-02-13</td>\n<td headers=\"Event\" class=\"gt_row gt_left\">Vuhledar offensive</td>\n<td headers=\"Plot Label\" class=\"gt_row gt_left\">Vuhledar</td></tr>\n    <tr><td headers=\"Key\" class=\"gt_row gt_left\">m</td>\n<td headers=\"Date\" class=\"gt_row gt_right\">2023-03-22</td>\n<td headers=\"Event\" class=\"gt_row gt_left\">2nd Zelinsky visit to Bakhmut</td>\n<td headers=\"Plot Label\" class=\"gt_row gt_left\">Bakhmut</td></tr>\n  </tbody>\n  \n  \n</table>\n</div>\n```\n\n\nSelected Milestone Dates\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}