{
  "hash": "3d6e112bf55507c9c496f66ef530d95a",
  "result": {
    "markdown": "---\ntitle: \"Ukraine MOD Statistics on Russian Losses\"\neditor: visual\nauthor: John Goldin\ndate: '2023-05-26'\ndate-modified: '2024-02-20'\nimage: \"UA-MOD-casualty-image.jpeg\"\nimage-alt: \"An example of a Russian casualty estimate as it appears on the Ukranian Ministry of Defense site\"\nimage-height: \"100px\"\nslug: ukraine-mod-stats\ncategories:\n  - Ukraine\ntags:\n  - Ukraine\ndescription: |\n  Scraped stats from Ukraine Ministry of Defense on Russian losses.\nlayout: single\nformat:\n  html:\n    code-fold: true\n    code-summary: \"Show the code\"\n    toc: true\n    fig-cap-location: top\nexecute: \n  echo: false\n---\n\n\nEach day the [Ministry of Defence of Ukraine](https://www.kmu.gov.ua/en/timeline?&type=all&tag=Defense) publishes a summary of Russian combat losses since the beginning of the Russian invasion. Daily reports presented in a fairly constant format go back to April of 2022.\n\nThis blog post provides a simple plot to track the losses as reported by the MOD. I've used R to download those reports and summarize them. I'm sure many others have done something similar.\n\nIn January 2024 I was no longer able to get the casualty reports from the MOD site. I think Ukraine is posting them on Factbook, but I'm not a Factbook user. I did find a [Ukrainian publication](https://cripo.com.ua/news/war/generalnyj-shtab-zsu-informuye-pro-vtraty-voroga-na-01-02-24/) that seems to be posting the reports, so I'm now using the data from that site.\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\nThe Ministry of Defence of Ukraine has been reporting a summary of Russian losses each day, including a graphic version like this:\n\n![Russian losses reported by Ukraine Ministry of Defence](UA-MOD-casualty-image.jpg){width=\"376\"}\n\nThe plot below summarizes the data in the Ministry of Defence reports of Russian losses up through May 18, 2024. It reports the average *daily* losses for each week. (Note that the last data point in the series may be based on a partial week.)\n\n\n::: {.cell file='~/Documents/R_local_repos/ukrainestats/R/ukraine_functions.R'}\n\n```{.r .cell-code .code-overflow-scroll  code-fold=\"true\" code-summary=\"R code which scrapes data from Ministry of Defense of Ukraine\" code-line-numbers=\"true\"}\n# using: https://www.scrapingdog.com/blog/web-scraping-r/\n# link <- \"https://www.mil.gov.ua/en/news/2023/03/08/the-total-combat-losses-of-the-enemy-from-24-02-2022-to-08-03-2023/\"\n#\n# page = read_html(link, as_html = FALSE)\n# lines <- read_html(link)\n#\n# former location of links:\n# https://www.kmu.gov.ua/en/news/zahalni-boiovi-vtraty-protyvnyka-z-24022022-po-02012024\n\n# once ukraine_functions.R has been sourced, use the following line to update\"\n# update_ukr_mod_df(\"ukr_mod_df.RData\", save_fname_ukr_mod_df = \"ukr_mod_df.RData\", days_previous = 15) |> print()\n\n\n############################################################################\n# These functions find the URL's for the Ukraine MOD daily reports and\n# parset the reports. The counts of losses are tabulated in the data frame\n# ukr_mod_df. To update that data frame, execute in the console\n#     update_ukr_mod_df(\"ukr_mod_df.RData\")\n############################################################################\n\n# directory that contains the saved ukraine data\nukraine_folder <- fs::path_home(\"R_local_repos\", \"ukrainestats\")\n\nlocal_fetch_date <- lubridate::ymd(\"2023-05-01\")    # date when html available in local_fetch_folder\nlocal_fetch_folder <- fs::path_home(\"R_local_repos\", \"ukrainestats\", \"ukr_reports\")\ncripo_date <- lubridate::ymd(\"2024-01-25\")    # date when html exists at cripo.com.ua (data obtained from Facebook, I think)\n\nif (1 == 2) {\n  ############################################################################\n  # Run the next line to update the data in ukr_mod_df.RData.\n  ############################################################################\n  update_ukr_mod_df(\"ukr_mod_df.RData\", days_previous = 10)\n}\n\nlibrary(tidyverse)\nlibrary(glue)\nlibrary(xml2)\n\n#' Extract the casualty count from a line in the report based on a regex search\n#'\n#'\n#'\n#' @param text The text of the web page that contains the casualty report.\n#' @param phrase The regex that will find the casualty number.\n#'\n#' @return The casualty number.\n#' @export\n#'\n#' @examples\n#' x <- str_extract(text, \"(?<=personnel [‒-] about )[\\\\d,]*\")\nextract_number  <-  function(text, phrase = \"(?<=personnel [‒-] about )[\\\\d,]*\") {\n  # In regular expressions, \\D is a shorthand character class that matches any character that is not a digit.\n  # It's the opposite of \\d, which matches any digit (0-9).\n  if (str_detect(text, intToUtf8(160))) text <- str_replace_all(text,  intToUtf8(160), \" \")\n  extracted_number <- str_extract(text, phrase) |>\n    str_replace_all(\"\\\\D\", \"\")   # \\\\D is a shorthand character class that matches any character that is not a digit.\n\n  if (is.na(extracted_number)) {\n    #if (!str_detect(text, phrase)) stop(paste0(phrase, \"\\nnot found in\\n\", text))\n    warning(paste0(\"number not found while looking for: \", phrase, \"\\n\", text))\n    return(NA_real_)\n  }\n  as.numeric(extracted_number)\n}\n\n# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\n#\n# Notes on scraping and parsing the data on Russian losses from the\n# Ukraine Ministry of Defense web site:\n#\n# April 12, 2022 is earliest Russian casualty count\n#\n# Some dates that are missing data: \"2022-06-16\", \"2022-06-18\" (others in June)\n#\n# at this point doing two digit date for start of war and end\n# https://www.mil.gov.ua/en/news/2023/02/23/the-total-combat-losses-of-the-enemy-from-24-02-22-to-23-02-23/\n#\n#   back then two digit years\n# https://www.mil.gov.ua/en/news/2022/12/16/the-total-combat-losses-of-the-enemy-from-24-02-to-16-12/\n#\n#   https://www.mil.gov.ua/en/news/2022/12/31/the-total-combat-losses-of-the-enemy-from-24-02-to-31-12/\n#\n#   3/3/2023 seems to be start of using 4-digit year\n#\n# wrong:\n#   https://www.mil.gov.ua/en/news/2022/09/23/the-total-combat-losses-of-the-enemy-from-24-02-to-23-09/\n#\n#   On January 1, started doing two digit dates\n# https://www.mil.gov.ua/en/news/2023/01/03/the-total-combat-losses-of-the-enemy-from-24-02-22-to-03-01-23/\n#\n#   works\n# https://www.mil.gov.ua/en/news/2023/02/20/the-total-combat-losses-of-the-enemy-from-24-02-22-to-20-02-23/\n#\n#   does not work:\n#   https://www.mil.gov.ua/en/news/23/02/23/the-total-combat-losses-of-the-enemy-from-24-02-22-to-23-02-23/\n#\n#   does note work:\n#   https://www.mil.gov.ua/en/news/23/02/20/the-total-combat-losses-of-the-enemy-from-24-02-22-to-20-02-23/\n#\n#   works:\n#   https://www.mil.gov.ua/en/news/2022/05/09/the-total-combat-losses-of-the-enemy-from-24-02-to-09-05/\n#\n#   works:\n#   https://www.mil.gov.ua/en/news/2022/06/25/the-total-combat-losses-of-the-enemy-from-24-02-to-25-06/\n#\n#   works:\n#   https://www.mil.gov.ua/en/news/2022/04/16/the-total-combat-losses-of-the-enemy-from-24-02-to-16-04/\n#\n#   first phrase changed between 2022-04-16 and 2022-04-17\n# \"personnel ‒ about\" to\n#\n#\n# wrong:\n#   https://www.mil.gov.ua/en/news/2022/07/12/the-total-combat-losses-of-the-enemy-from-24-02-to-12-07/\n#\n#   wrong:\n#   https://www.mil.gov.ua/en/news/2022/06/20/the-total-combat-losses-of-the-enemy-from-24-02-to-20-06/\n#\n#   More than one line found 2022-06-06 and that goes until 2022-07-26 when hits error\n#\n# New style of URLs at Governmental Portal (rather than MOD website)\n# https://www.kmu.gov.ua/en/news/zahalni-boiovi-vtraty-protyvnyka-z-24022022-po-04012024/\n#\n# Starting at some point in late 2023, reports have been moved to the Governmental Portal (kmu.gov.ua)\n# rather than MOD website (mil.gov.ua). The Governmental Portal does not allow me to use\n# read_lines to\n#\n# In December the casualty reports began to appear on the Governmental Portal (kmu.gov.ua).\n# Because I had difficulty using read_lines to scrape the data from the Governmental Portal,\n# I created an AppleScript script to download the html to my local disk at local_fetch_folder.\n# The date when these html files become available is local_fetch_date.\n#\n# But posting them at the kmu.gov.ua portal didn't last long. Now they seem to be on Facebook.\n# I had to find a Ukrainian publication that continued to reproduce them.\n# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\n\n# there's a gap in the English URL's. They start again with 2023/09/27\n# gap is 2023/09/13 to 2023/09/26\n# URLs of casualty report pages in Ukrainian\n# This is no longer needed. All these are now available in local_fetch_folder.\nin_ukraine_urls <- c(\"https://www.mil.gov.ua/news/2023/09/13/ponad-270-tisyach-vijskovih-vtratila-armiya-rf-za-567-dniv-agresii-proti-ukraini-–-genshtab-zsu/\",\n                     \"https://www.mil.gov.ua/news/2023/09/14/vid-pochatku-shirokomasshtabnoi-vijni-proti-ukraini-rosiya-vtratila-uzhe-ponad-270970-osib-znishheno-pidvodnij-choven-voroga-–-genshtab-zsu/\",\n                     \"https://www.mil.gov.ua/news/2023/09/15/zagalni-vtrati-rosijskih-zagarbnikiv-stanovlyat-271-4-tis-osib-znishheno-ponad-5-970-artsistem-voroga-genshtab-zsu/\",\n                     \"https://www.mil.gov.ua/news/2023/09/16/za-dobu-sili-oboroni-znishhili-16-artsistem-i-4-tanki-voroga-zagalni-vtrati-rf-stanovlyat-271-790-osib-–-genshtab-zsu/\",\n                     #\"https://www.mil.gov.ua/news/2023/09/17/vid-pochatku-shirokomasshtabnoi-vijni-proti-ukraini-rosiya-vtratila-uzhe-ponad-272-300-osib-znishheno-4-620-tankiv-voroga-–-genshtab-zsu/\",# there's space in personnel number\n                     \"https://www.mil.gov.ua/news/2023/09/18/ukrainski-zahisniki-za-dobu-likviduvali-620-okupantiv-znishhili-24-artsistemi-i-6-bbm-genshtab-zsu/\",\n                     \"https://www.mil.gov.ua/news/2023/09/19/zagalni-vtrati-rosijskih-zagarbnikiv-stanovlyat-273-4-tis-osib-znishheno-ponad-6-060-artsistem-voroga-genshtab-zsu/\",\n                     \"https://www.mil.gov.ua/news/2023/09/20/za-dobu-sili-oboroni-znishhili-34-artsistemi-i-37-bpla-operativno-taktichnogo-rivnya-voroga-zagalni-vtrati-rf-stanovlyat-orientovno-273-980-osib-genshtab-zsu/\",\n                     \"https://www.mil.gov.ua/news/2023/09/21/ukrainski-zahisniki-za-dobu-likviduvali-490-okupantiv-znishhili-41-artsistemu-i-15-bbm-voroga-genshtab-zsu/\",\n                     \"https://www.mil.gov.ua/news/2023/09/22/ukrainski-zahisniki-za-dobu-likviduvali-480-okupantiv-znishhili-40-artsistem-i-8-bbm-voroga-genshtab-zsu/\",\n                     \"https://www.mil.gov.ua/news/2023/09/23/ukrainski-zahisniki-za-dobu-likviduvali-510-okupantiv-znishhili-33-artsistemi-i-21-bbm-voroga-genshtab-zsu/\",\n                     \"https://www.mil.gov.ua/news/2023/09/24/vid-pochatku-shirokomasshtabnoi-vijni-proti-ukraini-rosiya-vtratila-blizko-275-850-osib-znishheno-4-662-tanka-voroga-–-genshtab-zsu/\",\n                     \"https://www.mil.gov.ua/news/2023/09/25/ukrainski-zahisniki-za-dobu-likviduvali-420-okupantiv-znishhili-27-artsistem-i-13-bbm-genshtab-zsu/\",\n                     'https://www.mil.gov.ua/news/2023/09/26/ukrainski-zahisniki-za-dobu-likviduvali-400-okupantiv-znishhili-39-artsistem-i-19-bbm-genshtab-zsu/')\n#                      \"https://www.mil.gov.ua/news/2023/09/27/vid-pochatku-shirokomasshtabnoi-vijni-proti-ukraini-rosiya-vtratila-uzhe-majzhe-277-tis-osib-znishheno-534-zasobiv-ppo-voroga-–-genshtab-zsu/\",\n#                      \"https://www.mil.gov.ua/news/2023/09/28/zagalni-vtrati-rosijskih-zagarbnikiv-stanovlyat-277-3-tis-osib-znishheno-ponad-8800-odinicz-avtotehniki-ta-avtoczistern-voroga-‒-generalnij-shtab-zsu/\")# code suggested by bard to extract date\npattern_ukrainian_personnel <- \"особового складу? ?[‒–—-][ \\u00A0]близько? ((?:\\\\d+\\\\s*)+)|особового складу [‒–—-][ \\u00A0]((?:\\\\d+\\\\s*)+)\"\n#str_replace_all(pattern_ukrainian_personnel, \"  \", str_c(intToUtf8(160), \" \"))\nkey_phrase <- \"особового складу ?[‒–—-]\"\n\n\n\n# # Load the httr2 package\n# library(httr2)\n#\n# # Create a function to test if a web page is in Ukrainian\n# # function created by Bard\n# is_ukrainian <- function(url) {\n#   # Make a request to the web page\n#   response <- request(url) %>% req_perform()\n#\n#   # Get the content type of the response\n#   content_type <- response$headers$`Content-Type`\n#\n#   # If the content type is HTML, extract the language code from the meta tags\n#   if (startsWith(content_type, \"text/html\")) {\n#     language_code <- html_meta(response$body, \"lang\")\n#\n#     # Return TRUE if the language code is Ukrainian, FALSE otherwise\n#     return(language_code == \"uk\")\n#   } else {\n#     # If the content type is not HTML, return FALSE\n#     return(FALSE)\n#   }\n# }\n# # Test if the web page in the string \"aurl\" is in Ukrainian\n# is_ukrainian(\"https://www.pravda.com.ua/\")\n# #\n#' Create a URL that goes to a standard Russian casualty report\n#'\n#' @param adate The Date for the report.\n#'\n#' @return String with the URL for the casualty report.\n#' @export\n#'\n#' @examples\ncreate_ukr_mod_link <- function(adate, old_style = FALSE) {\n  if (!is.Date(adate)) adate <- as_date(adate)\n  if (is.na(adate)) {\n    warning(paste0(adate, \"is not a valid date.[increate_ukr_mod_link]\"))\n    return(\"\")\n  }\n  # must have this form:   (4 digit years)\n  # https://www.mil.gov.ua/en/news/2023/03/08/the-total-combat-losses-of-the-enemy-from-24-02-2022-to-08-03-2023/\n  #\n  # format at end of September:\n  #\n  # https://www.mil.gov.ua/en/news/2023/09/29/the-total-combat-losses-of-the-enemy-from-24-02-2022-to-29-09-2023/\n  # https://www.mil.gov.ua/en/news/2023/09/28/the-total-combat-losses-of-the-enemy-from-24-02-2022-to-28-09-2023/\n  #\n  # Reports moved from MOD to www.kmu.gov.ua starting 2023-06-21\n  url_moved <- as_date(\"2023-06-21\")\n  if ((adate > cripo_date) & (adate <= today())) {\n    link <- glue(\"https://cripo.com.ua/news/war/generalnyj-shtab-zsu-informuye-pro-vtraty-voroga-na-\", format(adate, \"%d-%m-%y\"), \"/\")\n  }\n  else if ((old_style & (adate < url_moved)) |  (adate < url_moved)) {\n    if (adate > as_date(\"2022-09-01\")) link <- glue(\"https://www.kmu.gov.ua/en/news/zahalni-boiovi-vtraty-protyvnyka-z-24022022-po-\", format(adate, \"%d%m%Y\"),\"/\")\n    if (adate == as_date(\"2023-03-30\")) link <-  \"https://www.mil.gov.ua/en/news/2023/03/30/blizko-173-tis-osib-znishheno-ponad-6970-bojovih-bronovanih-mashin-voroga-–-genshtab-zsu/\"\n    else if (adate >= as_date(\"2023-03-03\")) link <- glue(\"https://www.mil.gov.ua/en/news/\", format(adate, \"%Y/%m/%d\"), \"/the-total-combat-losses-of-the-enemy-from-24-02-2022-to-\", format(adate, \"%d-%m-%Y\"), \"/\")\n    else if (adate >= as_date(\"2023-01-01\")) link <- glue(\"https://www.mil.gov.ua/en/news/\", format(adate, \"%Y/%m/%d\"), \"/the-total-combat-losses-of-the-enemy-from-24-02-22-to-\", format(adate, \"%d-%m-%y\"), \"/\")\n  }\n  else {\n    link <- glue(\"https://www.kmu.gov.ua/en/news/zahalni-boiovi-vtraty-protyvnyka-z-24022022-po-\", format(adate, \"%d%m%Y\"),\"/\")\n  }\n  link\n}\n\n#' Extract the lines from a Ukraine Ministry of Defense page that contain the Russian casualty counts\n#'\n#' @param adate Date of casualty report on Ukraine Ministry of Defense web site\n#' @param fetch_image_url Fetch the URL that displays the report as an image.\n#'\n#' @return List of text lines that contain the casualty reports, each category on different line.\n#' @export\n#'\n#' @examples\n#' fetch_ukr_mod_text(\"2023-03-29\")\n#' fetch_ukr_mod_text(\"\", known_url = \"https://www.mil.gov.ua/news/2023/09/17/vid-pochatku-shirokomasshtabnoi-vijni-proti-ukraini-rosiya-vtratila-uzhe-ponad-272-300-osib-znishheno-4-620-tankiv-voroga-–-genshtab-zsu/\")\n#' xx <- fetch_ukr_mod_text(\"\", known_url = in_ukraine_urls[2])\n#' xx <- fetch_ukr_mod_text(\"\", known_url = \"ukr_reports/ukraine_stats_2024-02-20.txt\")\n#'\nfetch_ukr_mod_text <- function(adate, fetch_image_url = FALSE, known_url = NULL, ukrainian = FALSE) {\n  # fed either a date or a URL\n  if (!is.Date(adate)) adate <- as_date(adate)\n  if (!is.null(known_url)) {\n    link <-  known_url\n    adate <- str_extract(known_url, pattern = \"(\\\\d{4})-(\\\\d{2})-(\\\\d{2})\") |>\n      ymd()\n  } else {\n    if (adate < ymd(\"2022-04-12\")) return(NA_character_)\n    if (adate > today()) return(NA_character_)\n\n    # what image line looks like:\n    # himg <- \"<a href=\\\"/assets/images/resources/69849/0b6b4d3834eddf4a9f1c0a30b788ca484d850890.jpg\\\" class=\\\"thumbnail\\\" data-image=\\\"/assets/images/resources/69849/0b6b4d3834eddf4a9f1c0a30b788ca484d850890.jpg\\\">\"\n    # from chatGPT:\n    # my_string <- \"This is a string with start some text end in the middle.\"\n    #\n    # # This regex pattern will extract the text between \"start\" and \"end\"\n    # extracted_text <- str_extract(my_string, \"(?<=start ).*(?= end)\")\n    # str_extract(himg, \"(?<=href=\\\").*(?=\\\" class)\")\n    # keep in mind: stringi::stri_reverse(\"abcde\")\n    # look for:  \"<base href=\\\"https://www.mil.gov.ua/en/\\\" />\"\n    link <- create_ukr_mod_link(adate)\n  }\n  if ((adate >= local_fetch_date) & (adate <= cripo_date)) {        # after this date, must relyinig on manually downloaded html pages\n    x <- tryCatch({\n      readr::read_lines(fs::path_home(\"Documents\", \"R_local_repos\", \"ukrainestats\", \"ukr_reports\",\n                                  glue(\"ukraine_stats_\", format(adate, \"%Y-%m-%d\"), \".html\")))\n    }, error = function(e) {\n      warning(paste0(\"For \", adate, \" before cripo_date, File not found. \"))\n      return(NULL)\n    })\n    if (length(x) == 0) {\n      warning(paste0(\"For \", adate, \" File not found. \"))\n      return(NA_character_)\n    }\n  } else {\n    x <- tryCatch({\n      readr::read_lines(link)\n  }, error = function(e) {\n    warning(paste0(\"For \", adate, \" Link error:\", e))\n    return(NULL)\n  })\n    if (length(x) == 0) {\n      warning(paste0(\"For \", adate, \" File not found. \"))\n      return(NA_character_)\n    }\n  }\n\n  # https://www.mil.gov.ua/assets/images/resources/71419/d086b0fc59b7a0a201780cc85201a6ab335ab86c.jpg\n  if (fetch_image_url) {\n    # return an image URL, not casualty data\n    # data-image=\"/assets/images/resources/71419/d086b0fc59b7a0a201780cc85201a6ab335ab86c.jpg\">\n    # image_lines <-  x[str_detect(x, \"meta property=\\\"og:image\")]\n    image_lines <-  x[str_detect(x, \"data-image=\")]\n    # sample line:\n    # \"<a href=\\\"/assets/images/resources/71419/d086b0fc59b7a0a201780cc85201a6ab335ab86c.jpg\\\" class=\\\"thumbnail\\\" data-image=\\\"/assets/images/resources/71419/d086b0fc59b7a0a201780cc85201a6ab335ab86c.jpg\\\">\"\n    if (length(image_lines) == 0) return(\"https://www.mil.gov.ua/assets/images/resources/69817/1ade4ec8f38bbaac946cff911451f14c3f551248.jpg\")\n    # extract the image URL from the line\n    # image_url <- str_extract(image_lines[1], \"(?<=data-image=\\\").*(?=\\\" >)\")\n    image_url <- str_extract(image_lines[1],  'class=\\\"thumbnail\\\" data-image=\\\"/assets/images/resources/[0-9]*/.*\\\\.jpg')\n    image_url <-  str_replace(image_url, 'class=\\\"thumbnail\\\" data-image=\\\"', \"\")\n    # return(str_extract(image_lines[1], \"(?<=content=\\\").*(?=\\\" />)\"))\n    return(paste0( 'https://www.mil.gov.ua/', image_url))\n  }\n  # image_lines <-  x[str_detect(x, \"meta property=\\\"og:image\")]\n  # str_extract(image_lines[1], \"(?<=content=\\\").*(?=\\\" />)\")\n  #\n  if (!ukrainian) {\n    # the image of the report is in: x[str_detect(x, \"<a href=\\\"/assets/images/resources/\")]\n    #the_line <- x[x |> str_detect(\"personnel ‒ about\")]\n    # the_line <- x[x |> str_detect(\"The total combat losses of the enemy from\")]\n    if (adate <= ymd(\"2022-04-16\")) the_line <- x[str_detect(x, \"personnel ‒ about\")]\n    if (adate > ymd(\"2022-04-16\")) the_line <- x[str_detect(x, \"persons were liquidated\")]\n    if (length(the_line) == 0) the_line <- x[str_detect(x, \"personnel ‒ about\")]\n    if (length(the_line) == 0) the_line <- x[str_detect(x, \" ‒ близько/ about\")]\n    if (length(the_line) == 0) {\n      if (adate < ymd(\"2023-09-13\")) warning(paste0(\"Info line not found for \", adate))\n      return(NA_character_)\n    }\n  } else {  # known_url so probably Ukranian page\n    # if all else fails, try Ukranian\n    # \"https://www.mil.gov.ua/news/2023/09/21/ukrainski-zahisniki-za-dobu-likviduvali-490-okupantiv-znishhili-41-artsistemu-i-15-bbm-voroga-genshtab-zsu/\"\n    # the_line <- x[str_detect(x, \"особового складу [‒–—-] близьк\")]\n    # the_line <- x[str_detect(x, \"особового складу [‒–—-]\")]\n    the_line <- x[str_detect(x, pattern_ukrainian_personnel)]\n  }\n  if (length(the_line) == 2) the_line <- the_line[1]\n\n  if (length(the_line) == 0) {\n    warning(paste0(\"Info line not found for \", adate))\n    return(NA_character_)\n  }\n  if (!ukrainian) {\n    if (adate <= as_date(\"2022-04-16\")) first_line <- which(str_detect(x, \"personnel ‒ about\"))\n    else if (adate > as_date(\"2022-04-16\"))  first_line <- which(str_detect(x, \"persons were liquidated\"))\n    if (length(first_line) == 0) first_line <- which(str_detect(x, \"personnel ‒ about\"))\n    if (length(first_line) == 0) first_line <- which(str_detect(x, \" ‒ близько/ about\"))\n  } else { # assume Ukrainian\n    first_line <- which(str_detect(x, key_phrase))\n  }\n  # 2023-04-23 not read because text of report appears twice on the page\n  if (length(the_line) > 1) {\n    warning(paste0(length(the_line), \" lines found for \", adate, \"\\n\", link))\n    return(NA_character_)\n  }\n  if (length(first_line) == 0) {\n    stop(paste(\"In ukraine_functions fetch_ukr_mod_text\", \"Missing first_line text.\", adate))\n  }\n  if (!ukrainian)  last_line <- which(str_detect(x, \"special equipment\"))\n  else last_line <- which(str_detect(x, \"спеціальна техніка\"))\n  if (length(last_line) == 2) last_line <-  last_line[2]\n  if (is.na(last_line) || (length(last_line) == 0)) last_line <- which(str_detect(x, \"vehicles\"))\n  if (is.na(last_line) || (length(last_line) == 0)) last_line <- which(str_detect(x, \"UAV\"))\n  if (length(first_line) == 2) first_line <-  first_line[1]\n  if (is.na(last_line) || (length(last_line) == 0)) last_line <- first_line + 10\n  # the_line\n  str_flatten(c(as.character(adate), x[first_line:last_line]))\n}\n\n# str_extract(string, pattern = \"(\\\\d{4})/(\\\\d{2})/(\\\\d{2})\")\n\n# sample report data from early 2024:\n# personnel ‒ about 363070 (+790) persons,\n# tanks ‒ 6011 (+9),\n# APV ‒ 11142 (+14),\n# artillery systems – 8604 (+30),\n# MLRS – 949 (+2),\n# Anti-aircraft warfare systems ‒ 631 (+1),\n# aircraft – 329 (+0),\n# helicopters – 324 (+0),\n# UAV operational-tactical level – 6771 (+18),\n# cruise missiles ‒ 1786 (+1),\n# warships / boats ‒ 23 (+0),\n# submarines - 1 (+0),\n# vehicles and fuel tanks – 11463 (+40),\n# special equipment ‒ 1313 (+9).\n\n# construct example data for testing parse_ukr_mod_text\n#' xx <- fetch_ukr_mod_text(\"\", known_url = \"ukr_reports/ukraine_stats_2024-02-20.txt\")\n#\n# some_data <- tibble(report = xx, date = ymd(\"2024-02-20\"))\n# some_additions <-  parse_ukr_mod_text(some_data)\n\n# most recent example, from https://cripo.com.ua/news/war/generalnyj-shtab-zsu-informuye-pro-vtraty-voroga-na-01-02-24/\n# особового складу / personnel ‒ близько/ about 386230 (+1000) осіб / persons,\n# танків / tanks ‒ 6322 (+12) од,\n# бойових броньованих машин / APV ‒ 11773 (+16) од,\n# артилерійських систем / artillery systems – 9228 (+33) од,\n# РСЗВ / MLRS – 976 (+2) од,\n# засоби ППО / Anti-aircraft warfare systems ‒ 663 (+0) од,\n# літаків / aircraft – 332 (+0) од,\n# гелікоптерів / helicopters – 324 (+0) од,\n# БПЛА оперативно-тактичного рівня / UAV operational-tactical level – 7136 (+36),\n# крилаті ракети / cruise missiles ‒ 1847 (+1),\n# кораблі /катери / warships / boats ‒ 23 (+0) од,\n# підводні човни / submarines – 1 (+0) од,\n# автомобільної техніки та автоцистерн/ vehicles and fuel tanks – 12267 (+36) од,\n# спеціальна техніка / special equipment ‒ 1462 (+10)\n\n#' Parse the Russian casualty info from Ukraine MOD summary pages.\n#'\n#' The text from each web page is in the report column. The extract_number\n#' function is used to find the casualties for each item, based on a regular expression\n#' to search for that type of item.\n#'\n#' @param mod_df A df which has a report column that contains the text from casualty web pages.\n#'\n#' @return The same df is returned, but with numeric columns added for each type of casualty.\n#' @export\n#'\n#' @examples\nparse_ukr_mod_text <- function(mod_df) {\n  mod_df$report <- str_replace_all(mod_df$report,  intToUtf8(160), \" \")\n  # mod_df$personnel = map_dbl(mod_df$report, extract_number, phrase = \"(?<=personnel ?[‒–—-] ? ?about (?:близько/ )?)[\\\\d,]*\" )\n  mod_df$personnel = map_dbl(mod_df$report, extract_number, phrase = \"(?<=about )[\\\\d,]*\" )\n  mod_df$tanks = map_dbl(mod_df$report, extract_number, phrase = \"(?<=tanks [‒–—-] )[\\\\d,]*\" )\n  mod_df$apv = map_dbl(mod_df$report, extract_number, phrase = \"(?<=APV [‒–—-] )[\\\\d,]*\" )\n  mod_df$artillery = map_dbl(mod_df$report, extract_number, phrase = \"(?<=artillery systems [‒–—-] )[\\\\d,]*\" )\n  mod_df$mlrs = map_dbl(mod_df$report, extract_number, phrase = \"(?<=MLRS [‒–—-] )[\\\\d,]*\" )\n  mod_df$aa = map_dbl(mod_df$report, extract_number, phrase = \"(?i)(?<=-aircraft warfare systems [‒–—-] )[\\\\d,]*\" )\n  # mod_df$aircraft = NA_real_\n  mod_df$aircraft = map_dbl(mod_df$report, extract_number, phrase = \"(?i)(?<=aircraft [‒–—-] )[\\\\d,]*\", .progress = TRUE )\n  mod_df$helicopters = map_dbl(mod_df$report, extract_number, phrase = \"(?<=helicopters [‒–—-] )[\\\\d,]*\" )\n  mod_df$uav = map_dbl(mod_df$report, extract_number, phrase = \"(?<=UAV operational-tactical level [‒–—-] )[\\\\d,]*\" )\n  mod_df$vehicles = map_dbl(mod_df$report, extract_number, phrase = \"(?i)(?<=vehicles and fuel tanks [‒–—-] )[\\\\d,]*\" )\n  mod_df$special = map_dbl(mod_df$report, extract_number, phrase = \"(?i)(?<=special equipment [‒–—-] )[\\\\d,]*\" )\n  mod_df$warships = map_dbl(mod_df$report, extract_number, phrase = \"(?<=warships / boats [‒–—-] )[\\\\d,]*\" )\n  mod_df$cmissiles = map_dbl(mod_df$report, extract_number, phrase = \"(?i)(?<=cruise missiles [‒–—-] )[\\\\d,]*\" )\n  mod_df\n}\n\n# parse ukranian\n# особового складу ‒ близько 273980 (+520) осіб,\n# танків ‒ 4635 (+7) од,\n# бойових броньованих машин ‒ 8868 (+17) од,\n# артилерійських систем – 6096 (+34) од,\n# РСЗВ – 779 (+1) од,\n# засоби ППО ‒ 526 (+0) од,\n# літаків – 315 (+0) од,\n# гелікоптерів – 316 (+0) од,\n# БПЛА оперативно-тактичного рівня – 4821 (+37),\n# крилаті ракети ‒ 1479 (+0),\n# кораблі/катери ‒ 20 (+0) од,\n# підводні човни – 1 (+0) од,\n# автомобільної техніки та автоцистерн – 8633 (+32) од,\n# спеціальна техніка ‒ 906 (+3).\n#\n# personnel - about 273,980 (+520) people,\n# tanks ‒ 4,635 (+7) units,\n# armored combat vehicles ‒ 8,868 (+17) units,\n# artillery systems – 6096 (+34) units,\n# RSZV – 779 (+1) units,\n# air defense equipment ‒ 526 (+0) units,\n# aircraft – 315 (+0) units,\n# helicopters – 316 (+0) units,\n# UAVs of the operational-tactical level - 4821 (+37),\n# cruise missiles ‒ 1479 (+0),\n# ships/boats ‒ 20 (+0) units,\n# submarines – 1 (+0) units,\n# automotive equipment and tank trucks - 8633 (+32) units,\n# special equipment ‒ 906 (+3).\nparse_ukr_mod_ukraine <- function(mod_df) {\n  temp <- mod_df$report\n\n  # mod_df$personnel = map_dbl(str_replace_all(mod_df$report, intToUtf8(160), \"\"), extract_number, phrase = \"(?<=особового складу ?[‒–—-] ? ?близько? )[\\\\d,]*\" ) #personnel\n  mod_df$report <- str_replace_all(mod_df$report,  intToUtf8(160), \" \")\n\n  mod_df$personnel = map_dbl(mod_df$report, extract_number, phrase = pattern_ukrainian_personnel ) #personnel\n  # mod_df$personnel = map_dbl(mod_df$report,   extracted_personnel <- str_extract(the_line, pattern_personnel) |>\n  #                              str_replace_all(\"\\\\D\", \"\")\n\n  mod_df$tanks = map_dbl(mod_df$report, extract_number, phrase = \"(?<=танків ?[‒–—-] )[\\\\d,]*\" ) # utf8ToInt(\"‒-–—\") [1] 8210   45 8211 8212\n  mod_df$apv = map_dbl(mod_df$report, extract_number, phrase = \"(?<=бойових броньованих машин ?[‒–—-] )[\\\\d,]*\" )\n  mod_df$artillery = map_dbl(mod_df$report, extract_number, phrase = \"(?<=артилерійських систем ?[‒–—-] )[\\\\d,]*\" ) #prob\n  mod_df$mlrs = map_dbl(mod_df$report, extract_number, phrase = \"(?<=РСЗВ ?[‒–—-] )[\\\\d,]*\" )\n  mod_df$aa = map_dbl(mod_df$report, extract_number, phrase = \"(?<=засоби ППО ?[‒–—-] )[\\\\d,]*\" )\n  mod_df$aircraft = map_dbl(mod_df$report, extract_number, phrase = \"(?<=літаків ?[‒–—-] )[\\\\d,]*\" )\n  mod_df$helicopters = map_dbl(mod_df$report, extract_number, phrase = \"(?<=гелікоптерів ?[‒–—-] )[\\\\d,]*\" )\n  mod_df$uav = map_dbl(mod_df$report, extract_number, phrase = \"(?<=БПЛА оперативно-тактичного рівня ?[‒–—-] )[\\\\d,]*\" )\n  mod_df$vehicles = map_dbl(mod_df$report, extract_number, phrase = \"(?<=автомобільної техніки та автоцистерн/? ?[‒–—-] )[\\\\d,]*\" )\n  # mod_df$special = map_dbl(mod_df$report, extract_number, phrase = \"(?<=спеціальна техніка ?[‒–—-] )[\\\\d,]*\" )\n  mod_df$warships = map_dbl(mod_df$report, extract_number, phrase = \"(?<=кораблі ?/ ?катери ?[‒–—-] )[\\\\d,]*\" )\n  mod_df\n}\n#' Update the df that contains Ukraine MOD Russian casualty stats\n#'\n#' @param fname_ukr_mod_df file name of RData file that contains the stats\n#'\n#' @return Returns the updated df but also saves it to an RData file as a side effect.\n#' @export\n#'\n#' @examples\n#' update_ukr_mod_df(\"ukr_mod_df.RData\", save_fname_ukr_mod_df = \"test.RData\")\n#'\nupdate_ukr_mod_df <- function(fname_ukr_mod_df, from_date = NULL, to_date = NULL,\n                              days_previous = 35,\n                              ukraine_folder = \"/Users/johngoldin/Documents/R_local_repos/ukrainestats/\",\n                              save_fname_ukr_mod_df = NULL) {\n\n  if (1 == 2) {\n    ############################################################################\n    # Run the next line to update the data in ukr_mod_df.RData.\n    ############################################################################\n    update_ukr_mod_df(\"ukr_mod_df.RData\", save_fname_ukr_mod_df = \"ukr_mod_df.RData\")\n  }\n\n  # fname_ukr_mod_df <- \"ukr_mod_df.RData\"\n  # ukraine_folder  <-  \"/Users/johngoldin/Documents/R_local_repos/ukrainestats/\"\n  load(paste0(ukraine_folder, fname_ukr_mod_df))\n\n  ############################################################################\n  # Here's the orginal sequence of dates that was used to initialize ukr_mod_df.\n  # the_dates <- seq(from = ymd(\"2022-04-15\"), to = today(), by = \"1 day\")\n  ############################################################################\n\n  # dates that need to be added to ukr_mod_df\n  if (is.null(from_date)) from_date <-  today() - days_previous\n  if (is.null(to_date)) to_date <- today()\n\n  additional_dates <- seq(from = from_date, to = to_date, by = \"1 day\")\n  new_reports <- map_chr(additional_dates, fetch_ukr_mod_text, .progress = TRUE)\n\n  # page_additions <- tibble(report = from_ukrainian_urls[!is.na(from_ukrainian_urls)], date = ymd(str_sub(report, start = 1, end = 10)))\n  page_additions <- tibble(report = new_reports, date = additional_dates) |> filter(!is.na(report))\n  additions <-  parse_ukr_mod_text(page_additions)\n\n  # from map_chr help:\n  # \\(x) f(x, 1, 2, collapse = \",\")\n  # additions from Ukranian url's rather than english\n\n  # from_ukrainian_urls <- map_chr(in_ukraine_urls,\n  #                                \\(x) fetch_ukr_mod_text(\"1950-01-27\", known_url = x))\n  # # eliminate any NAs\n  # ukrainian_page_additions <- tibble(report = from_ukrainian_urls[!is.na(from_ukrainian_urls)], date = ymd(str_sub(report, start = 1, end = 10)))\n  # ukrainian_additions <-  parse_ukr_mod_ukraine(ukrainian_page_additions)\n  # # ukr_mod_df <- tibble(report = new_reports, date = ymd(str_sub(report, start = 1, end = 10)))\n  # if (length(new_reports > 0)) {\n  #   ukr_mod_page_additions <- tibble(report = new_reports, date = ymd(str_sub(report, start = 1, end = 10)))\n  #   ukr_mod_additions <- parse_ukr_mod_text(ukr_mod_page_additions)\n  # }\n\n  # from_ukrainian_urls <- map_chr(in_ukraine_urls,\n  #                                \\(x) fetch_ukr_mod_text(\"1950-01-27\", known_url = x))\n  # # eliminate any NAs\n  # ukrainian_page_additions <- tibble(report = from_ukrainian_urls[!is.na(from_ukrainian_urls)], date = ymd(str_sub(report, start = 1, end = 10)))\n  # ukrainian_additions <-  parse_ukr_mod_ukraine(ukrainian_page_additions)\n  # # ukr_mod_df <- tibble(report = new_reports, date = ymd(str_sub(report, start = 1, end = 10)))\n  # if (length(new_reports > 0)) {\n  #   ukr_mod_page_additions <- tibble(report = new_reports, date = ymd(str_sub(report, start = 1, end = 10)))\n  #   ukr_mod_additions <- parse_ukr_mod_text(ukr_mod_page_additions)\n  # }\n\n  # use overlap_dates to check whether MOD has updated recent daata\n  # overlap_dates <- bind_rows(ukr_mod_df |> filter((ukr_mod_df$date %in% ukr_mod_additions$date)),\n  #                            ukr_mod_additions |> filter(ukr_mod_additions$date %in% ukr_mod_df$date)) |>\n  #   arrange(date) # |> View()\n\n  # save_ukr_mod__df <- ukr_mod_df\n  # ukr_mod_df <- bind_rows(ukr_mod_df |> filter(!(ukr_mod_df$date %in% ukr_mod_additions$date)), ukr_mod_additions)\n  ukr_mod_df <- bind_rows(ukr_mod_df |> filter(!(date %in% additions$date)), additions)\n\n  # fix possible typo in one url page\n  if(ukr_mod_df$artillery[ukr_mod_df$date == ymd(\"2024-02-27\")] == 1009) {\n    ukr_mod_df$artillery[ukr_mod_df$date == ymd(\"2024-02-27\")] <- 10009\n  }\n\n  # calculate the number of days between each row\n  ukr_mod_df <- ukr_mod_df |>\n    arrange(date) |>\n    mutate(gap = as.numeric(date - lag(date, default = ukr_mod_df$date[1] - 1)))\n\n  # by default, save it back into the save file that it was loaded from\n  if (is.null(save_fname_ukr_mod_df)) save_fname_ukr_mod_df <- fname_ukr_mod_df\n  save(ukr_mod_df, file = paste0(ukraine_folder, save_fname_ukr_mod_df))\n  usethis::ui_done(glue::glue(\"Updated {save_fname_ukr_mod_df} through {max(ukr_mod_df$date, na.rm = TRUE)}.\"))\n  return(ukr_mod_df)\n}\n\n# test page on a single date\n# test_ukrainian_page(in_ukraine_urls[3])\ntest_ukrainian_page <- function(known_url, adate = NULL) {\n  # use to check in_ukraine_urls\n  if (!is.character(known_url)) return()\n  if (is.null(adate)) {\n  link <-  known_url\n  adate <- str_extract(known_url, pattern = \"(\\\\d{4})/(\\\\d{2})/(\\\\d{2})\") |>\n    ymd()\n  x <- read_lines(link)\n  } else {\n    x <- fetch_ukr_mod_text(adate, known_url = known_url)\n  }\n\n  # if all else fails, try Ukranian\n  # \"https://www.mil.gov.ua/news/2023/09/21/ukrainski-zahisniki-za-dobu-likviduvali-490-okupantiv-znishhili-41-artsistemu-i-15-bbm-voroga-genshtab-zsu/\"\n  the_line <- x[str_detect(x, key_phrase)]\n  if (the_line == 0) stop(paste0(\"In test_ukrainian_page, key line not found. \", key_phrase))\n\n  if (length(the_line) > 1) stop(the_line[1:5])\n  # print(the_line)\n\n\n  # Now extract the number\n  extracted_personnel <- extract_number(the_line, pattern_ukrainian_personnel)\n\n  # The extracted_number will include the prefix phrase,\n  # so we'll need to use str_replace_all to remove it and extract only the number\n  # extracted_number <- str_replace_all(extracted_number, \"[^\\\\d]\", \"\")\n\n  ukrainian_page_additions <- tibble(report = the_line, adate)\n  ukrainian_additions <-  parse_ukr_mod_ukraine(ukrainian_page_additions)\n}\n\n# xx <- map(in_ukraine_urls, test_ukrainian_page, .progress = TRUE) |> list_rbind()\n```\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code .code-overflow-scroll  code-fold=\"true\" code-summary=\"R code which creates the summary plot\" code-line-numbers=\"true\"}\n# for_plot <- ukr_mod3 |> \n#   pivot_longer(cols = c(Personnel, Tanks, APV, Artillery, MLRS,\n#                         Helicopters, Aircraft), \n#                names_to = \"category\", values_to = \"count\") |> \n#   mutate(category = factor(category, levels = c(\"Personnel\", \"Tanks\", \"APV\",\n#                                                 \"Artillery\", \"MLRS\", \n#                                                 \"Helicopters\", \"Aircraft\")))\n# \n# p <- ggplot(data = for_plot, aes(x = date, y = count)) + \n#   geom_smooth(colour = \"darkgrey\") +\n#   geom_point() + \n#   facet_wrap(~ category, ncol = 1, scales = \"free_y\")\n\n#############################################################################\n#\n# Calculate average daily Russian losses by week. -> ukr_mod_weekly\n#\n#############################################################################\n\nukr_mod_weekly <- ukr_mod_df  |> arrange(date) |> \n  # isoweek of January 1 is 52, not 1\n  mutate(wk = if_else((isoweek(date) > 25) & (month(date) == 1),  year(date) - 1, year(date)) * 100 + isoweek(date)) |> \n  group_by(wk) |> \n  slice_tail(n = 1) |>  # as recommended by GPT\n  ungroup() |> \n  mutate(gap = as.numeric(date - lag(date, default = ukr_mod_df$date[1] - 1)),\n         Personnel = (personnel - lag(personnel)) / gap,\n         Tanks = (tanks - lag(tanks)) / gap,\n         APV = (apv - lag(apv)) / gap,\n         Artillery = (artillery - lag(artillery)) / gap,\n         MLRS = (mlrs - lag(mlrs)) / gap,\n         `Anti-Aircraft` = (aa - lag(aa)) / gap,\n         `Tactical UAV` = (uav - lag(uav)) / gap,\n         Vehicles = (vehicles - lag(vehicles)) / gap,\n         `Cruise Missiles` = (cmissiles - lag(cmissiles)) / gap,\n         Helicopters = (helicopters - lag(helicopters)) / gap,\n         Aircraft = (aircraft - lag(aircraft)) / gap)\n\nfor_plot_wk <- ukr_mod_weekly |> \n  pivot_longer(cols = c(Personnel, Tanks, APV, Artillery, MLRS,\n                        Helicopters, Aircraft, `Anti-Aircraft`, `Tactical UAV`,\n                        Vehicles, `Cruise Missiles`), \n               names_to = \"category\", values_to = \"count\")|> \n  mutate(category = factor(category, levels = c(\"Personnel\", \"Tanks\", \"APV\",\n                                                \"Artillery\", \"MLRS\",\n                                                \"Helicopters\", \"Aircraft\",\n                                                \"Anti-Aircraft\", \"Tactical UAV\",\n                                                \"Vehicles\", \"Cruise Missiles\")))\nmilestones$category = factor(milestones$category, levels = levels(for_plot_wk$category))\n\nfull_milestones <- tidyr::crossing(levels(milestones$category), milestones$date)\npwk <- ggplot(data = for_plot_wk, aes(x = date, y = count)) + \n  # ylim(0, NA) +\n  geom_vline(data = tidyr::expand(milestones, category, date), mapping = aes(xintercept = date), colour = \"orange\") +\n  geom_smooth(colour = \"darkgrey\", span = 0.15) +\n  geom_point() + \n  geom_text(data = milestones, aes(label = key_symbol, y = Inf), colour = \"orange\", vjust = 1, hjust = 0) +\n  geom_text(data = milestones, aes(label = short_event, y = Inf), colour = \"darkgrey\", angle = 90, hjust = 1, vjust = 0) +\n  facet_wrap(~ category, ncol = 1, scales = \"free_y\") +\n  ggtitle(paste0(\"Ukranian MOD Reports of Average Daily Russian Losses Thru \", up_through_char)) + \n  xlab(\"\") + ylab(\"Average Daily Losses\") +\n  theme_minimal()\n\n# Noah Smkth tweet onincrease in artillery losses: https://twitter.com/Noahpinion/status/1660793977917046784\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![Weekly Russian Losses According to Ukraine Ministry of Defense](index_files/figure-html/display-weekley-plot-1.png){width=768}\n:::\n:::\n\n\nThis is only the Ukraine side of the story.\n\nThe report always refers to \"liquidated personnel,\" but there's some ambiguity about what that means.\n\n> The Ukrainians use the word \"liquidated\" to refer to the Russian losses. However, that word choice leaves the actual figure of killed and wounded up to interpretation. With \"liquidated\" Kyiv could mean \"killed\" or \"killed and wounded.\" -- Stavros Atlamazoglou at the website [19fortyfive.com](https://www.19fortyfive.com/2023/03/220000-dead-or-wounded-putins-ukraine-war-destroyed-the-russian-military/)\n\nPresumably the personnel losses are an estimate. There are lots of factors that could affect how close these counts come to reality. Western intelligence sources sometimes report their own estimates of Russian losses. Those do not necessarily match these counts. The plot may help to assess the change in the tempo of the war over time.\n\nThe vertical red lines on the plot intended to help relate the time line to some of the reported events during the war. Each line is identified by a letter. The labels on the plot are necessarily terse; the table below lists them with a bit fuller labels.\n\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div id=\"gqlfrinora\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\">\n<style>#gqlfrinora table {\n  font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n#gqlfrinora thead, #gqlfrinora tbody, #gqlfrinora tfoot, #gqlfrinora tr, #gqlfrinora td, #gqlfrinora th {\n  border-style: none;\n}\n\n#gqlfrinora p {\n  margin: 0;\n  padding: 0;\n}\n\n#gqlfrinora .gt_table {\n  display: table;\n  border-collapse: collapse;\n  line-height: normal;\n  margin-left: auto;\n  margin-right: auto;\n  color: #333333;\n  font-size: 16px;\n  font-weight: normal;\n  font-style: normal;\n  background-color: #FFFFFF;\n  width: auto;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #A8A8A8;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #A8A8A8;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n}\n\n#gqlfrinora .gt_caption {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n#gqlfrinora .gt_title {\n  color: #333333;\n  font-size: 125%;\n  font-weight: initial;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-color: #FFFFFF;\n  border-bottom-width: 0;\n}\n\n#gqlfrinora .gt_subtitle {\n  color: #333333;\n  font-size: 85%;\n  font-weight: initial;\n  padding-top: 3px;\n  padding-bottom: 5px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-color: #FFFFFF;\n  border-top-width: 0;\n}\n\n#gqlfrinora .gt_heading {\n  background-color: #FFFFFF;\n  text-align: center;\n  border-bottom-color: #FFFFFF;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#gqlfrinora .gt_bottom_border {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#gqlfrinora .gt_col_headings {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#gqlfrinora .gt_col_heading {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  overflow-x: hidden;\n}\n\n#gqlfrinora .gt_column_spanner_outer {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: 4px;\n  padding-right: 4px;\n}\n\n#gqlfrinora .gt_column_spanner_outer:first-child {\n  padding-left: 0;\n}\n\n#gqlfrinora .gt_column_spanner_outer:last-child {\n  padding-right: 0;\n}\n\n#gqlfrinora .gt_column_spanner {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 5px;\n  overflow-x: hidden;\n  display: inline-block;\n  width: 100%;\n}\n\n#gqlfrinora .gt_spanner_row {\n  border-bottom-style: hidden;\n}\n\n#gqlfrinora .gt_group_heading {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  text-align: left;\n}\n\n#gqlfrinora .gt_empty_group_heading {\n  padding: 0.5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#gqlfrinora .gt_from_md > :first-child {\n  margin-top: 0;\n}\n\n#gqlfrinora .gt_from_md > :last-child {\n  margin-bottom: 0;\n}\n\n#gqlfrinora .gt_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  margin: 10px;\n  border-top-style: solid;\n  border-top-width: 1px;\n  border-top-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  overflow-x: hidden;\n}\n\n#gqlfrinora .gt_stub {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#gqlfrinora .gt_stub_row_group {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n  vertical-align: top;\n}\n\n#gqlfrinora .gt_row_group_first td {\n  border-top-width: 2px;\n}\n\n#gqlfrinora .gt_row_group_first th {\n  border-top-width: 2px;\n}\n\n#gqlfrinora .gt_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#gqlfrinora .gt_first_summary_row {\n  border-top-style: solid;\n  border-top-color: #D3D3D3;\n}\n\n#gqlfrinora .gt_first_summary_row.thick {\n  border-top-width: 2px;\n}\n\n#gqlfrinora .gt_last_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#gqlfrinora .gt_grand_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#gqlfrinora .gt_first_grand_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: double;\n  border-top-width: 6px;\n  border-top-color: #D3D3D3;\n}\n\n#gqlfrinora .gt_last_grand_summary_row_top {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: double;\n  border-bottom-width: 6px;\n  border-bottom-color: #D3D3D3;\n}\n\n#gqlfrinora .gt_striped {\n  background-color: rgba(128, 128, 128, 0.05);\n}\n\n#gqlfrinora .gt_table_body {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#gqlfrinora .gt_footnotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#gqlfrinora .gt_footnote {\n  margin: 0px;\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#gqlfrinora .gt_sourcenotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#gqlfrinora .gt_sourcenote {\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#gqlfrinora .gt_left {\n  text-align: left;\n}\n\n#gqlfrinora .gt_center {\n  text-align: center;\n}\n\n#gqlfrinora .gt_right {\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n}\n\n#gqlfrinora .gt_font_normal {\n  font-weight: normal;\n}\n\n#gqlfrinora .gt_font_bold {\n  font-weight: bold;\n}\n\n#gqlfrinora .gt_font_italic {\n  font-style: italic;\n}\n\n#gqlfrinora .gt_super {\n  font-size: 65%;\n}\n\n#gqlfrinora .gt_footnote_marks {\n  font-size: 75%;\n  vertical-align: 0.4em;\n  position: initial;\n}\n\n#gqlfrinora .gt_asterisk {\n  font-size: 100%;\n  vertical-align: 0;\n}\n\n#gqlfrinora .gt_indent_1 {\n  text-indent: 5px;\n}\n\n#gqlfrinora .gt_indent_2 {\n  text-indent: 10px;\n}\n\n#gqlfrinora .gt_indent_3 {\n  text-indent: 15px;\n}\n\n#gqlfrinora .gt_indent_4 {\n  text-indent: 20px;\n}\n\n#gqlfrinora .gt_indent_5 {\n  text-indent: 25px;\n}\n</style>\n<table class=\"gt_table\" data-quarto-disable-processing=\"false\" data-quarto-bootstrap=\"false\">\n  <thead>\n    \n    <tr class=\"gt_col_headings\">\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"Key\">Key</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"Date\">Date</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"Event\">Event</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"Plot Label\">Plot Label</th>\n    </tr>\n  </thead>\n  <tbody class=\"gt_table_body\">\n    <tr><td headers=\"Key\" class=\"gt_row gt_left\">a</td>\n<td headers=\"Date\" class=\"gt_row gt_right\">2022-04-04</td>\n<td headers=\"Event\" class=\"gt_row gt_left\">UKR cleared west</td>\n<td headers=\"Plot Label\" class=\"gt_row gt_left\">cleared west</td></tr>\n    <tr><td headers=\"Key\" class=\"gt_row gt_left\">b</td>\n<td headers=\"Date\" class=\"gt_row gt_right\">2022-04-19</td>\n<td headers=\"Event\" class=\"gt_row gt_left\">Russian attack in east</td>\n<td headers=\"Plot Label\" class=\"gt_row gt_left\">Attack</td></tr>\n    <tr><td headers=\"Key\" class=\"gt_row gt_left\">c</td>\n<td headers=\"Date\" class=\"gt_row gt_right\">2022-05-08</td>\n<td headers=\"Event\" class=\"gt_row gt_left\">Siverskyi Russian failure</td>\n<td headers=\"Plot Label\" class=\"gt_row gt_left\">Siverskyi</td></tr>\n    <tr><td headers=\"Key\" class=\"gt_row gt_left\">d</td>\n<td headers=\"Date\" class=\"gt_row gt_right\">2022-05-13</td>\n<td headers=\"Event\" class=\"gt_row gt_left\">UKR counter-attack Kharkiv</td>\n<td headers=\"Plot Label\" class=\"gt_row gt_left\">Kharkiv</td></tr>\n    <tr><td headers=\"Key\" class=\"gt_row gt_left\">e</td>\n<td headers=\"Date\" class=\"gt_row gt_right\">2022-05-20</td>\n<td headers=\"Event\" class=\"gt_row gt_left\">Mariupol Fell</td>\n<td headers=\"Plot Label\" class=\"gt_row gt_left\">Mariupol</td></tr>\n    <tr><td headers=\"Key\" class=\"gt_row gt_left\">f</td>\n<td headers=\"Date\" class=\"gt_row gt_right\">2022-07-03</td>\n<td headers=\"Event\" class=\"gt_row gt_left\">UKR start Kherson offensive</td>\n<td headers=\"Plot Label\" class=\"gt_row gt_left\">Kherson</td></tr>\n    <tr><td headers=\"Key\" class=\"gt_row gt_left\">g</td>\n<td headers=\"Date\" class=\"gt_row gt_right\">2022-08-29</td>\n<td headers=\"Event\" class=\"gt_row gt_left\">Lysychansk fell</td>\n<td headers=\"Plot Label\" class=\"gt_row gt_left\">Lysychansk</td></tr>\n    <tr><td headers=\"Key\" class=\"gt_row gt_left\">h</td>\n<td headers=\"Date\" class=\"gt_row gt_right\">2022-09-06</td>\n<td headers=\"Event\" class=\"gt_row gt_left\">Kharkiv offensive</td>\n<td headers=\"Plot Label\" class=\"gt_row gt_left\">Kharkiv</td></tr>\n    <tr><td headers=\"Key\" class=\"gt_row gt_left\">i</td>\n<td headers=\"Date\" class=\"gt_row gt_right\">2022-09-21</td>\n<td headers=\"Event\" class=\"gt_row gt_left\">Russia partial mobilization</td>\n<td headers=\"Plot Label\" class=\"gt_row gt_left\">mobilized</td></tr>\n    <tr><td headers=\"Key\" class=\"gt_row gt_left\">j</td>\n<td headers=\"Date\" class=\"gt_row gt_right\">2022-10-01</td>\n<td headers=\"Event\" class=\"gt_row gt_left\">Lyman taken</td>\n<td headers=\"Plot Label\" class=\"gt_row gt_left\">Lymann</td></tr>\n    <tr><td headers=\"Key\" class=\"gt_row gt_left\">k</td>\n<td headers=\"Date\" class=\"gt_row gt_right\">2022-11-11</td>\n<td headers=\"Event\" class=\"gt_row gt_left\">UKR enter Kharkiv</td>\n<td headers=\"Plot Label\" class=\"gt_row gt_left\">Kharkiv</td></tr>\n    <tr><td headers=\"Key\" class=\"gt_row gt_left\">l</td>\n<td headers=\"Date\" class=\"gt_row gt_right\">2023-02-13</td>\n<td headers=\"Event\" class=\"gt_row gt_left\">Vuhledar offensive</td>\n<td headers=\"Plot Label\" class=\"gt_row gt_left\">Vuhledar</td></tr>\n    <tr><td headers=\"Key\" class=\"gt_row gt_left\">m</td>\n<td headers=\"Date\" class=\"gt_row gt_right\">2023-03-22</td>\n<td headers=\"Event\" class=\"gt_row gt_left\">2nd Zelinsky visit to Bakhmut</td>\n<td headers=\"Plot Label\" class=\"gt_row gt_left\">Bakhmut</td></tr>\n    <tr><td headers=\"Key\" class=\"gt_row gt_left\">n</td>\n<td headers=\"Date\" class=\"gt_row gt_right\">2023-06-06</td>\n<td headers=\"Event\" class=\"gt_row gt_left\">Nova Kakhovka dam</td>\n<td headers=\"Plot Label\" class=\"gt_row gt_left\">dam</td></tr>\n    <tr><td headers=\"Key\" class=\"gt_row gt_left\">o</td>\n<td headers=\"Date\" class=\"gt_row gt_right\">2023-10-10</td>\n<td headers=\"Event\" class=\"gt_row gt_left\">Avdiivka offensive</td>\n<td headers=\"Plot Label\" class=\"gt_row gt_left\">Avdiivka</td></tr>\n    <tr><td headers=\"Key\" class=\"gt_row gt_left\">p</td>\n<td headers=\"Date\" class=\"gt_row gt_right\">2024-02-17</td>\n<td headers=\"Event\" class=\"gt_row gt_left\">Fall of Adviika</td>\n<td headers=\"Plot Label\" class=\"gt_row gt_left\">Adviivka Lost</td></tr>\n  </tbody>\n  \n  \n</table>\n</div>\n```\n\n\nSelected Milestone Dates\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}